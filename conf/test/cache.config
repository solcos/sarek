/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run nf-core/sarek -profile test,<extra_test_profile>,<docker/singularity> --outdir <OUTDIR>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

if (System.getenv('TEST_DATA_BASE')) {
    if ("$TEST_DATA_BASE") {
        params.test_data_base = "$TEST_DATA_BASE"
    }
}

try {
    includeConfig "https://raw.githubusercontent.com/nf-core/modules/master/tests/config/test_data.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/modules test data config")
}

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = '6.5GB'
    max_time   = '8.h'

    // Input data
    input = "${projectDir}/tests/csv/3.0/fastq_single.csv"

    // No AWS iGenomes
    genome          = null
    igenomes_ignore = true

    // Small reference genome
    bcftools_annotations       = params.test_data['sarscov2']['illumina']['test2_vcf_gz']
    bcftools_annotations_index = params.test_data['sarscov2']['illumina']['test2_vcf_gz_tbi']
    bcftools_header_lines      = "${projectDir}/tests/config/bcfann_test_header.txt"
    dbsnp                      = params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz']
    fasta                      = params.test_data['homo_sapiens']['genome']['genome_fasta']
    germline_resource          = params.test_data['homo_sapiens']['genome']['gnomad_r2_1_1_vcf_gz']
    intervals                  = params.test_data['homo_sapiens']['genome']['genome_interval_list']
    known_indels               = params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_vcf_gz']
    ngscheckmate_bed           = params.test_data['homo_sapiens']['genome']['ngscheckmate_bed']
    snpeff_cache               = null
    snpeff_db                  = 105
    snpeff_genome              = 'WBcel235'
    vep_cache                  = null
    vep_cache_version          = 110
    vep_genome                 = 'WBcel235'
    vep_species                = 'caenorhabditis_elegans'

    // Sentieon
    sentieon_dnascope_model    = "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/Sentieon/SentieonDNAscopeModel1.1.model"

    // default params
    split_fastq = 0         // no FASTQ splitting
    tools       = 'strelka' // Variant calling with Strelka

    // Ignore params that will throw warning through params validation
    validationSchemaIgnoreParams = 'genomes,test_data'
}

process {
    // This must contain .* in order to properly overwrite the standard config in test cases
    withName:'.*:FREEC_SOMATIC'{
        ext.args = {
            [
                "sample":[
                    inputformat: "pileup",
                    mateorientation: "FR"
                ],
                "general":[
                    bedgraphoutput: "TRUE",
                    noisydata: "TRUE",
                    minexpectedgc: "0",
                    readcountthreshold: "1",
                    sex: meta.sex,
                    window: "10",
                    ],
                "control":[
                    inputformat: "pileup",
                    mateorientation: "FR"
                ]
            ]
        }
    }

    withName: '.*:MUTECT2_PAIRED'{
        //sample name from when the test data was generated
        ext.args = { "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --normal-sample normal" }
    }

    withName: '.*:FILTERVARIANTTRANCHES'{
        ext.args = { "--info-key CNN_1D --indel-tranche 0" }
    }
}

// Enable container engines/virtualisation envs for CI testing
// only works when specified with the profile ENV
// otherwise tests can be done with the regular provided profiles
if (System.getenv('PROFILE')) {
    if ("$PROFILE" == "conda") {
        conda.createTimeout                      = "120 min"
        conda.enabled                            = true
        charliecloud.enabled                     = false
        docker.enabled                           = false
        podman.enabled                           = false
        shifter.enabled                          = false
        singularity.enabled                      = false
    } else if ("$PROFILE" == "docker") {
        conda.enabled                            = false
        docker.enabled                           = true
        docker.userEmulation                     = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled                     = false
        podman.enabled                           = false
        shifter.enabled                          = false
        singularity.enabled                      = false
    } else if ("$PROFILE" == "singularity") {
        conda.enabled                            = false
        singularity.autoMounts                   = true
        singularity.enabled                      = true
        charliecloud.enabled                     = false
        docker.enabled                           = false
        podman.enabled                           = false
        shifter.enabled                          = false
    }
}
